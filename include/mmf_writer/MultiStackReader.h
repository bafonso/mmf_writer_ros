/* 
 * File:   StackReader.h
 * Author: Marc
 *
 * Created on October 27, 2010, 4:32 PM
 *
 * used to read compressed stacks (generated by LinearStackCompressor or its subclasses)
 * from disk
 * this is the highest level reading function in the library;
 *
 * create the stackreader by passing a file name
 * access frames using the getFrame command
 * generate a meta data file using getSupplementalData
 *
 * in separate projects:
 * see also the supplemental dll wrapper: StackReaderWrapper
 * see also the example movie player: StackPlayer
 *
 * example usage:
 *   StackReader sr("\\\\labnas2\\Phototaxis\\exponentialstack.mmf"); //open stack for reading
 *   sr.createSupplementalDataFile("c:\\testcs5_dat.dat"); //create a metadata file
 *   sr.playMovie(); //play a movie on the screen
 * (C) Marc Gershow; licensed under the Creative Commons Attribution Share Alike 3.0 United States License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us/ or send a letter to
 * Creative Commons, 171 Second Street, Suite 300, San Francisco, California, 94105, USA.
 *
 */

#ifndef MULTISTACKREADER_H
#define	MULTISTACKREADER_H

#include "StackReader.h"
#include "StaticBackgroundCompressor.h"
#include "ExtraDataWriter.h"
#include <map>
#include <string>
#include <cv.h>

class MultiStackReader : public StackReader {
public:
    MultiStackReader();
    MultiStackReader(const char *fname);
    MultiStackReader(const std::vector<std::string>fnames);
    virtual ~MultiStackReader();
    virtual void setInputFileName (const char *fname);
    virtual void setInputFileName (const std::vector<std::string>fnames);
    virtual void openInputFile ();
    virtual void closeInputFile ();

    virtual void getBackground (int frameNum, IplImage **dst, int frameRange = 0);
    virtual void getFrame (int frameNum, IplImage **dst);
    virtual void annotatedFrame (int frameNum, IplImage **dst);
    
    virtual CvSize getImageSize ();

    
    virtual ExtraDataWriter *getSupplementalData();
    /*  virtual ExtraDataWriter *addToSupplementalData(ExtraDataWriter *edw, int frameOffset);
     *  when combining multiple stacks into one analysis file, use addToSupplementalData to create a combined metadata file
     *  if edw == NULL, creates the EDW
     *  same as getSupplementalData, with two differences
     *  FrameNumber (add) = FrameNumber (get) + frameOffset
     *  LocalFrameNumber (add) = FrameNumber (get)
     */
    virtual ExtraDataWriter *addToSupplementalData(ExtraDataWriter *edw = NULL, int frameOffset = 0);
    
    virtual bool dataFileOk();

    virtual inline int getTotalFrames () {
        return totalFrames;
    }

    virtual inline bool isError() {
        return iserror;
    }

    virtual inline std::string getError() {
        return errormessage;
    }

    virtual std::string diagnostics();

    virtual CvRect getLargestROI ();

    virtual const ImageMetaData* getMetaData(int frameNum);
    
    static std::vector<std::string> parseFileNameInput (const char *fname);
    virtual int getKeyFrameInterval();
    
protected:
    std::vector<std::pair<StackReader *, int> > sr;
    std::vector<std::string> fnames;
    std::vector<int> endFrames;
    
    virtual void init();
    virtual void checkError();
    virtual int findStackReader(int frameNumber);
   
    
private:
      MultiStackReader(const MultiStackReader& orig);
  
};

#endif	/* MULTISTACKREADER_H */

